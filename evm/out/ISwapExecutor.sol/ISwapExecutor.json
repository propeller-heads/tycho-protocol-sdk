{"abi":[{"type":"function","name":"swap","inputs":[{"name":"givenAmount","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"calculatedAmount","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"swap(uint256,bytes)":"bd0625ab"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"givenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calculatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swap(uint256,bytes)\":{\"details\":\"This method can either take the amount of the input token or the amount of the output token that we would like to swap. If called with the amount of the  input token, the amount of the output token will be returned, and vice versa. Whether it is the input or output that is given, is encoded in the data parameter. Note Part of the informal interface is that the executor supports sending the received  tokens to a receiver address. If the underlying smart contract does not provide this  functionality consider adding an additional transfer in the implementation.  This function is marked as `payable` to accommodate delegatecalls, which can forward  a potential `msg.value` to it.\",\"params\":{\"data\":\"Data that holds information necessary to perform the swap.\",\"givenAmount\":\"The amount of either the input token or output token to swap.\"},\"returns\":{\"calculatedAmount\":\"The amount of either the input token or output token swapped, depending on the givenAmount inputted.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(uint256,bytes)\":{\"notice\":\"Performs a swap on a liquidity pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISwapExecutor.sol\":\"ISwapExecutor\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":balancer-v2/interfaces/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"src/interfaces/ISwapExecutor.sol\":{\"keccak256\":\"0x776a8242bc04ade71ca70d0d574742f3b5898e049ab2fe9e59bbddaf2424dc83\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://569e844a3c9f6d67e824ba57eed75a6328b38138161a0472acf422125ba28339\",\"dweb:/ipfs/QmcTNeDYptrJ5Ffxkjqfs65ZsPNZccZzoqhdbShuSGtdct\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"givenAmount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"swap","outputs":[{"internalType":"uint256","name":"calculatedAmount","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"swap(uint256,bytes)":{"details":"This method can either take the amount of the input token or the amount of the output token that we would like to swap. If called with the amount of the  input token, the amount of the output token will be returned, and vice versa. Whether it is the input or output that is given, is encoded in the data parameter. Note Part of the informal interface is that the executor supports sending the received  tokens to a receiver address. If the underlying smart contract does not provide this  functionality consider adding an additional transfer in the implementation.  This function is marked as `payable` to accommodate delegatecalls, which can forward  a potential `msg.value` to it.","params":{"data":"Data that holds information necessary to perform the swap.","givenAmount":"The amount of either the input token or output token to swap."},"returns":{"calculatedAmount":"The amount of either the input token or output token swapped, depending on the givenAmount inputted."}}},"version":1},"userdoc":{"kind":"user","methods":{"swap(uint256,bytes)":{"notice":"Performs a swap on a liquidity pool."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","balancer-v2/interfaces/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/ISwapExecutor.sol":"ISwapExecutor"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"keccak256":"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c","urls":["bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba","dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"src/interfaces/ISwapExecutor.sol":{"keccak256":"0x776a8242bc04ade71ca70d0d574742f3b5898e049ab2fe9e59bbddaf2424dc83","urls":["bzz-raw://569e844a3c9f6d67e824ba57eed75a6328b38138161a0472acf422125ba28339","dweb:/ipfs/QmcTNeDYptrJ5Ffxkjqfs65ZsPNZccZzoqhdbShuSGtdct"],"license":"UNLICENSED"}},"version":1},"id":56}